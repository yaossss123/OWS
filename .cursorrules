# Order Management System - Cursor Rules

## 1. 项目简介

### 项目概述
基于Spring Boot的订单管理系统，采用分层架构设计，提供RESTful API接口。

### 核心模块
- 订单管理 (Order Management)
- 客户管理 (Customer Management) 
- 产品管理 (Product Management)
- 用户认证 (Authentication)
- 数据统计 (Statistics)

## 2. 技术架构

### 架构模式
- **分层架构**: Controller -> Service -> Repository
- **设计模式**: MVC, Repository, Factory, Strategy
- **数据访问**: JPA/Hibernate + MySQL
- **API设计**: RESTful + OpenAPI 3.0

### 技术栈
```
Spring Boot 2.7.x
Spring Security + JWT
Spring Data JPA
MySQL 8.0
Maven
Swagger/OpenAPI
JUnit 5 + Mockito
```

## 3. 目录结构

```
src/main/java/com/example/order/
├── controller/          # REST控制器
│   ├── OrderController.java
│   ├── CustomerController.java
│   └── ProductController.java
├── service/            # 业务逻辑层
│   ├── OrderService.java
│   ├── CustomerService.java
│   └── ProductService.java
├── repository/         # 数据访问层
│   ├── OrderRepository.java
│   ├── CustomerRepository.java
│   └── ProductRepository.java
├── entity/            # JPA实体类
│   ├── Order.java
│   ├── Customer.java
│   └── Product.java
├── dto/              # 数据传输对象
│   ├── OrderDTO.java
│   ├── CustomerDTO.java
│   └── ProductDTO.java
├── config/           # 配置类
│   ├── SecurityConfig.java
│   ├── SwaggerConfig.java
│   └── DatabaseConfig.java
├── util/             # 工具类
│   ├── JwtUtil.java
│   ├── ValidationUtil.java
│   └── DateUtil.java
└── exception/        # 异常处理
    ├── GlobalExceptionHandler.java
    └── CustomException.java
```

## 4. 代码规范

### 代码风格
- 遵循Google Java Style Guide
- 使用4个空格缩进
- 类名使用PascalCase
- 方法名和变量名使用camelCase
- 常量使用UPPER_SNAKE_CASE

### 注释规范
```java
/**
 * 功能: 创建新订单
 * 逻辑链: 验证输入 -> 检查库存 -> 创建订单 -> 更新库存
 * 注意事项: 需要事务支持
 */
@Transactional
public OrderDTO createOrder(CreateOrderRequest request) {
    // 实现逻辑
}

/**
 * @desc 验证订单数据有效性
 * @param orderDTO 订单数据传输对象
 * @returns boolean 验证结果
 * @example validateOrder(orderDTO)
 */
public boolean validateOrder(OrderDTO orderDTO) {
    // 验证逻辑
}
```

### 异常处理
```java
// 统一异常处理
@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {
        // 处理验证异常
    }
}
```

## 5. 命名规范

### 类命名
- Controller: `XxxController`
- Service: `XxxService`
- Repository: `XxxRepository`
- Entity: `Xxx` (单数形式)
- DTO: `XxxDTO`
- Config: `XxxConfig`

### 方法命名
- 查询: `findXxx`, `getXxx`, `queryXxx`
- 创建: `createXxx`, `saveXxx`
- 更新: `updateXxx`, `modifyXxx`
- 删除: `deleteXxx`, `removeXxx`
- 验证: `validateXxx`, `checkXxx`

### 变量命名
- 实体对象: `order`, `customer`, `product`
- 集合: `orders`, `customers`, `products`
- 布尔值: `isValid`, `hasPermission`, `canDelete`
- 常量: `MAX_ORDER_AMOUNT`, `DEFAULT_PAGE_SIZE`

## 6. 组件规范

### Controller层规范
```java
@RestController
@RequestMapping("/api/v1/orders")
@Validated
public class OrderController {
    
    /**
     * 创建订单
     * @param request 创建订单请求
     * @return 订单信息
     */
    @PostMapping
    public ResponseEntity<OrderDTO> createOrder(@Valid @RequestBody CreateOrderRequest request) {
        // 实现逻辑
    }
}
```

### Service层规范
```java
@Service
@Transactional
public class OrderService {
    
    /**
     * STATE 作用域: 订单管理
     * 数据流: 请求参数 -> 业务验证 -> 数据库操作 -> 返回结果
     * 持久化: JPA自动管理
     */
    public OrderDTO createOrder(CreateOrderRequest request) {
        // 业务逻辑实现
    }
}
```

### Repository层规范
```java
@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
    
    /**
     * 根据客户ID查询订单
     * @param customerId 客户ID
     * @return 订单列表
     */
    List<Order> findByCustomerId(Long customerId);
}
```

## 7. 样式规范

### 配置文件规范
```yaml
# application.yml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/order_management
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
```

### 日志规范
```java
@Slf4j
public class OrderService {
    
    public OrderDTO createOrder(CreateOrderRequest request) {
        log.info("开始创建订单，客户ID: {}", request.getCustomerId());
        try {
            // 业务逻辑
            log.info("订单创建成功，订单ID: {}", order.getId());
            return orderDTO;
        } catch (Exception e) {
            log.error("订单创建失败，错误信息: {}", e.getMessage(), e);
            throw new OrderCreationException("订单创建失败");
        }
    }
}
```

## 8. 国际化规范

### 消息配置
```properties
# messages.properties
order.created=订单创建成功
order.not.found=订单不存在
customer.invalid=客户信息无效
product.out.of.stock=产品库存不足
```

### 国际化使用
```java
@RestController
public class OrderController {
    
    @Autowired
    private MessageSource messageSource;
    
    @PostMapping
    public ResponseEntity<OrderDTO> createOrder(@Valid @RequestBody CreateOrderRequest request, 
                                              Locale locale) {
        // 业务逻辑
        String message = messageSource.getMessage("order.created", null, locale);
        return ResponseEntity.ok(orderDTO);
    }
}
```

## 9. Git提交规范

### Angular Commit Message格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 提交类型
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

### 提交示例
```
feat(order): 添加订单创建功能

- 实现订单创建API接口
- 添加订单验证逻辑
- 集成库存检查功能

Closes #123
```

### 分支命名规范
- 功能分支: `feature/order-management`
- 修复分支: `fix/auth-validation`
- 发布分支: `release/v1.0.0`
- 热修复: `hotfix/critical-bug`

### 代码审查要求
- 所有PR必须通过代码审查
- 必须包含单元测试
- 必须符合代码规范
- 必须更新相关文档 